"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { RotateCcw, Star, CheckCircle, XCircle, Home } from "lucide-react"
import { useRouter } from "next/navigation"

interface WasteItem {
  id: number
  name: string
  icon: string
  correctBin: string
  description: string
}

interface Bin {
  id: string
  name: string
  color: string
  icon: string
  bgColor: string
}

const wasteItems: WasteItem[] = [
  { id: 1, name: "–ì–∞–∑–µ—Ç–∞", icon: "üì∞", correctBin: "paper", description: "–ë—É–º–∞–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è" },
  { id: 2, name: "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–∫–∞", icon: "ü•§", correctBin: "plastic", description: "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è —É–ø–∞–∫–æ–≤–∫–∞" },
  { id: 3, name: "–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±–∞–Ω–∫–∞", icon: "üçØ", correctBin: "glass", description: "–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è —Ç–∞—Ä–∞" },
  { id: 4, name: "–Ø–±–ª–æ—á–Ω–∞—è –∫–æ–∂—É—Ä–∞", icon: "üçé", correctBin: "organic", description: "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã" },
  { id: 5, name: "–ö–∞—Ä—Ç–æ–Ω–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞", icon: "üì¶", correctBin: "paper", description: "–ö–∞—Ä—Ç–æ–Ω–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞" },
  { id: 6, name: "–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –ø–∞–∫–µ—Ç", icon: "üõçÔ∏è", correctBin: "plastic", description: "–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è" },
  { id: 7, name: "–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–∫–∞", icon: "üç∂", correctBin: "glass", description: "–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –ø–æ—Å—É–¥–∞" },
  { id: 8, name: "–ë–∞–Ω–∞–Ω–æ–≤–∞—è –∫–æ–∂—É—Ä–∞", icon: "üçå", correctBin: "organic", description: "–ü–∏—â–µ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã" },
  { id: 9, name: "–ñ—É—Ä–Ω–∞–ª", icon: "üìñ", correctBin: "paper", description: "–ü–µ—á–∞—Ç–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è" },
  { id: 10, name: "–ô–æ–≥—É—Ä—Ç–æ–≤—ã–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫", icon: "ü•õ", correctBin: "plastic", description: "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è —Ç–∞—Ä–∞" },
]

const bins: Bin[] = [
  { id: "paper", name: "–ë—É–º–∞–≥–∞", color: "blue", icon: "üìÑ", bgColor: "bg-blue-100" },
  { id: "plastic", name: "–ü–ª–∞—Å—Ç–∏–∫", color: "yellow", icon: "ü•§", bgColor: "bg-yellow-100" },
  { id: "glass", name: "–°—Ç–µ–∫–ª–æ", color: "green", icon: "üç∂", bgColor: "bg-green-100" },
  { id: "organic", name: "–û—Ä–≥–∞–Ω–∏–∫–∞", color: "brown", icon: "üçé", bgColor: "bg-orange-100" },
]

export default function WasteSortingGame() {
  const router = useRouter()
  const [currentItem, setCurrentItem] = useState(0)
  const [score, setScore] = useState(0)
  const [lives, setLives] = useState(3)
  const [gameOver, setGameOver] = useState(false)
  const [gameWon, setGameWon] = useState(false)
  const [feedback, setFeedback] = useState<{ show: boolean; correct: boolean; message: string }>({
    show: false,
    correct: false,
    message: "",
  })
  const [draggedItem, setDraggedItem] = useState<WasteItem | null>(null)

  const currentWasteItem = wasteItems[currentItem]
  const progress = ((currentItem + 1) / wasteItems.length) * 100

  const handleDragStart = (item: WasteItem) => {
    setDraggedItem(item)
  }

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault()
  }

  const handleDrop = (e: React.DragEvent, binId: string) => {
    e.preventDefault()
    if (draggedItem) {
      handleBinClick(binId)
    }
    setDraggedItem(null)
  }

  const handleBinClick = (binId: string) => {
    const isCorrect = binId === currentWasteItem.correctBin

    if (isCorrect) {
      setScore(score + 10)
      setFeedback({
        show: true,
        correct: true,
        message: `–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ${currentWasteItem.name} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${bins.find((b) => b.id === binId)?.name}"`,
      })

      setTimeout(() => {
        setFeedback({ show: false, correct: false, message: "" })
        if (currentItem < wasteItems.length - 1) {
          setCurrentItem(currentItem + 1)
        } else {
          setGameWon(true)
        }
      }, 2000)
    } else {
      const newLives = lives - 1
      setLives(newLives)
      setFeedback({
        show: true,
        correct: false,
        message: `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! ${currentWasteItem.name} –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è "${bins.find((b) => b.id === currentWasteItem.correctBin)?.name}"`,
      })

      if (newLives === 0) {
        setTimeout(() => {
          setGameOver(true)
        }, 2000)
      } else {
        setTimeout(() => {
          setFeedback({ show: false, correct: false, message: "" })
        }, 2000)
      }
    }
  }

  const resetGame = () => {
    setCurrentItem(0)
    setScore(0)
    setLives(3)
    setGameOver(false)
    setGameWon(false)
    setFeedback({ show: false, correct: false, message: "" })
  }

  const getScoreRating = () => {
    const percentage = (score / (wasteItems.length * 10)) * 100
    if (percentage >= 90) return { rating: "–û—Ç–ª–∏—á–Ω–æ!", color: "text-green-600", stars: 3 }
    if (percentage >= 70) return { rating: "–•–æ—Ä–æ—à–æ!", color: "text-blue-600", stars: 2 }
    if (percentage >= 50) return { rating: "–ù–µ–ø–ª–æ—Ö–æ!", color: "text-yellow-600", stars: 1 }
    return { rating: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", color: "text-red-600", stars: 0 }
  }

  if (gameOver) {
    const rating = getScoreRating()
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md bg-white/90 backdrop-blur-sm border-red-200">
          <CardHeader className="text-center">
            <div className="text-6xl mb-4">üòû</div>
            <CardTitle className="text-2xl text-red-800">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</CardTitle>
            <CardDescription>–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</CardDescription>
          </CardHeader>
          <CardContent className="text-center space-y-4">
            <div className="bg-red-50 p-4 rounded-lg">
              <p className="text-lg font-semibold text-red-800">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –æ—á–∫–æ–≤</p>
              <p className={`text-sm ${rating.color}`}>{rating.rating}</p>
            </div>
            <div className="flex flex-col gap-3">
              <Button onClick={resetGame} className="bg-red-600 hover:bg-red-700">
                <RotateCcw className="h-4 w-4 mr-2" />
                –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
              </Button>
              <Button variant="outline" onClick={() => router.push("/learning/waste-sorting")}>
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é
              </Button>
              <Button variant="ghost" onClick={() => router.push("/dashboard/student")}>
                <Home className="h-4 w-4 mr-2" />
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (gameWon) {
    const rating = getScoreRating()
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md bg-white/90 backdrop-blur-sm border-green-200">
          <CardHeader className="text-center">
            <div className="text-6xl mb-4">üéâ</div>
            <CardTitle className="text-2xl text-green-800">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</CardTitle>
            <CardDescription>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –æ—Ç—Ö–æ–¥–æ–≤!</CardDescription>
          </CardHeader>
          <CardContent className="text-center space-y-4">
            <div className="bg-green-50 p-4 rounded-lg">
              <p className="text-lg font-semibold text-green-800">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –æ—á–∫–æ–≤</p>
              <p className={`text-sm ${rating.color}`}>{rating.rating}</p>
              <div className="flex justify-center mt-2">
                {[...Array(3)].map((_, i) => (
                  <Star
                    key={i}
                    className={`h-6 w-6 ${i < rating.stars ? "text-yellow-500 fill-current" : "text-gray-300"}`}
                  />
                ))}
              </div>
            </div>
            <div className="bg-blue-50 p-3 rounded-lg">
              <p className="text-sm text-blue-800">
                –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <strong>+50 –æ—á–∫–æ–≤</strong> –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã!
              </p>
            </div>
            <div className="flex flex-col gap-3">
              <Button onClick={resetGame} className="bg-green-600 hover:bg-green-700">
                <RotateCcw className="h-4 w-4 mr-2" />
                –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
              </Button>
              <Button variant="outline" onClick={() => router.push("/learning/waste-sorting")}>
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é
              </Button>
              <Button variant="ghost" onClick={() => router.push("/dashboard/student")}>
                <Home className="h-4 w-4 mr-2" />
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-blue-50 to-purple-50">
      {/* Header */}
      <div className="bg-white/80 backdrop-blur-sm border-b border-green-200 sticky top-0 z-50">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center gap-3">
              <Button variant="ghost" onClick={() => router.back()}>
                ‚Üê –ù–∞–∑–∞–¥
              </Button>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent">
                  –ò–≥—Ä–∞: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Ö–æ–¥–æ–≤
                </h1>
                <p className="text-sm text-gray-600">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <div className="text-right">
                <p className="text-sm text-gray-600">
                  –û—á–∫–∏: <span className="font-semibold">{score}</span>
                </p>
                <p className="text-sm text-gray-600">
                  –ñ–∏–∑–Ω–∏: <span className="font-semibold text-red-600">{"‚ù§Ô∏è".repeat(lives)}</span>
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Progress */}
        <Card className="mb-8 bg-white/80 backdrop-blur-sm border-blue-200">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold text-blue-800">–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä—ã</h2>
              <Badge className="bg-blue-100 text-blue-800">
                {currentItem + 1} –∏–∑ {wasteItems.length}
              </Badge>
            </div>
            <Progress value={progress} className="h-3" />
          </CardContent>
        </Card>

        {/* Current Item */}
        <Card className="mb-8 bg-white/90 backdrop-blur-sm border-purple-200">
          <CardHeader className="text-center">
            <CardTitle className="text-purple-800">–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º?</CardTitle>
          </CardHeader>
          <CardContent className="text-center">
            <div
              className="bg-gradient-to-br from-purple-100 to-pink-100 rounded-xl p-8 mb-4 cursor-move select-none"
              draggable
              onDragStart={() => handleDragStart(currentWasteItem)}
            >
              <div className="text-6xl mb-4">{currentWasteItem.icon}</div>
              <h3 className="text-2xl font-bold text-purple-800 mb-2">{currentWasteItem.name}</h3>
              <p className="text-purple-600">{currentWasteItem.description}</p>
            </div>
            <p className="text-sm text-gray-600">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</p>
          </CardContent>
        </Card>

        {/* Bins */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          {bins.map((bin) => (
            <Card
              key={bin.id}
              className={`${bin.bgColor} border-2 border-dashed border-gray-300 hover:border-gray-400 cursor-pointer transition-all duration-300 hover:shadow-lg`}
              onClick={() => handleBinClick(bin.id)}
              onDragOver={handleDragOver}
              onDrop={(e) => handleDrop(e, bin.id)}
            >
              <CardContent className="p-6 text-center">
                <div className="text-4xl mb-3">{bin.icon}</div>
                <h3 className="font-bold text-lg mb-1">{bin.name}</h3>
                <p className="text-sm text-gray-600 capitalize">{bin.color} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</p>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Feedback */}
        {feedback.show && (
          <Card className={`mb-8 ${feedback.correct ? "bg-green-50 border-green-200" : "bg-red-50 border-red-200"}`}>
            <CardContent className="p-6 text-center">
              <div className="text-4xl mb-4">
                {feedback.correct ? (
                  <CheckCircle className="h-12 w-12 text-green-600 mx-auto" />
                ) : (
                  <XCircle className="h-12 w-12 text-red-600 mx-auto" />
                )}
              </div>
              <p className={`text-lg font-semibold ${feedback.correct ? "text-green-800" : "text-red-800"}`}>
                {feedback.message}
              </p>
            </CardContent>
          </Card>
        )}

        {/* Instructions */}
        <Card className="bg-white/80 backdrop-blur-sm border-gray-200">
          <CardHeader>
            <CardTitle className="text-gray-800">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div className="flex items-center gap-2">
                <span className="text-blue-600">üìÑ</span>
                <span>–ë—É–º–∞–≥–∞ –∏ –∫–∞—Ä—Ç–æ–Ω ‚Üí –°–∏–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</span>
              </div>
              <div className="flex items-center gap-2">
                <span className="text-yellow-600">ü•§</span>
                <span>–ü–ª–∞—Å—Ç–∏–∫ ‚Üí –ñ–µ–ª—Ç—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</span>
              </div>
              <div className="flex items-center gap-2">
                <span className="text-green-600">üç∂</span>
                <span>–°—Ç–µ–∫–ª–æ ‚Üí –ó–µ–ª–µ–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</span>
              </div>
              <div className="flex items-center gap-2">
                <span className="text-orange-600">üçé</span>
                <span>–û—Ä–≥–∞–Ω–∏–∫–∞ ‚Üí –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
