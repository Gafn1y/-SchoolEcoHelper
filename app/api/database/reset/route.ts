import { NextRequest, NextResponse } from 'next/server'
import { sql } from '@/lib/db'

export async function POST(request: NextRequest) {
  try {
    // Only allow in development mode
    if (process.env.NODE_ENV !== 'development') {
      return NextResponse.json({ 
        error: 'Database reset is only allowed in development mode' 
      }, { status: 403 })
    }

    // Check for confirmation
    const { confirm } = await request.json()
    if (confirm !== 'RESET_DATABASE') {
      return NextResponse.json({ 
        error: 'Invalid confirmation. Send { "confirm": "RESET_DATABASE" }' 
      }, { status: 400 })
    }

    console.log('üî• Starting database reset...')

    // Drop all tables in correct order
    await sql`DROP TABLE IF EXISTS user_badges CASCADE`
    await sql`DROP TABLE IF EXISTS badges CASCADE`
    await sql`DROP TABLE IF EXISTS user_challenges CASCADE`
    await sql`DROP TABLE IF EXISTS challenges CASCADE`
    await sql`DROP TABLE IF EXISTS user_actions CASCADE`
    await sql`DROP TABLE IF EXISTS eco_actions CASCADE`
    await sql`DROP TABLE IF EXISTS teacher_invites CASCADE`
    await sql`DROP TABLE IF EXISTS users CASCADE`
    await sql`DROP TABLE IF EXISTS classes CASCADE`
    await sql`DROP TABLE IF EXISTS schools CASCADE`

    console.log('üóëÔ∏è All tables dropped')

    // Recreate schools table
    await sql`
      CREATE TABLE schools (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        address TEXT,
        director_id INTEGER,
        total_classes INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    // Recreate users table
    await sql`
      CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        role VARCHAR(50) NOT NULL CHECK (role IN ('student', 'teacher', 'director', 'admin')),
        school_id INTEGER REFERENCES schools(id),
        class_id INTEGER,
        grade VARCHAR(10),
        points INTEGER DEFAULT 0,
        level INTEGER DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    // Recreate classes table
    await sql`
      CREATE TABLE classes (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        grade VARCHAR(10) NOT NULL,
        school_id INTEGER REFERENCES schools(id) NOT NULL,
        teacher_id INTEGER REFERENCES users(id),
        student_count INTEGER DEFAULT 0,
        capacity INTEGER DEFAULT 30,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    // Add foreign key constraints
    await sql`
      ALTER TABLE users ADD CONSTRAINT fk_users_class_id 
      FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE SET NULL
    `

    await sql`
      ALTER TABLE schools ADD CONSTRAINT fk_schools_director 
      FOREIGN KEY (director_id) REFERENCES users(id) ON DELETE SET NULL
    `

    // Create remaining tables
    await sql`
      CREATE TABLE eco_actions (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        points INTEGER NOT NULL,
        category VARCHAR(100),
        icon VARCHAR(50),
        unit VARCHAR(20) DEFAULT '—Ä–∞–∑',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await sql`
      CREATE TABLE user_actions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) NOT NULL,
        action_id INTEGER REFERENCES eco_actions(id) NOT NULL,
        quantity INTEGER DEFAULT 1,
        points_earned INTEGER NOT NULL,
        description TEXT,
        photo_url VARCHAR(500),
        status VARCHAR(50) DEFAULT 'pending',
        reviewed_by INTEGER REFERENCES users(id),
        reviewed_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await sql`
      CREATE TABLE challenges (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        target_value INTEGER NOT NULL,
        points_reward INTEGER NOT NULL,
        start_date DATE,
        end_date DATE,
        challenge_type VARCHAR(100),
        school_id INTEGER REFERENCES schools(id),
        created_by INTEGER REFERENCES users(id),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await sql`
      CREATE TABLE user_challenges (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) NOT NULL,
        challenge_id INTEGER REFERENCES challenges(id) NOT NULL,
        current_progress INTEGER DEFAULT 0,
        completed BOOLEAN DEFAULT FALSE,
        completed_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await sql`
      CREATE TABLE badges (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        icon VARCHAR(50),
        points_required INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await sql`
      CREATE TABLE user_badges (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) NOT NULL,
        badge_id INTEGER REFERENCES badges(id) NOT NULL,
        earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    await sql`
      CREATE TABLE teacher_invites (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255),
        subject VARCHAR(100) NOT NULL,
        school_id INTEGER REFERENCES schools(id) NOT NULL,
        class_id INTEGER REFERENCES classes(id),
        invited_by INTEGER REFERENCES users(id) NOT NULL,
        invite_code VARCHAR(20) UNIQUE,
        expires_at TIMESTAMP,
        status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'declined')),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `

    console.log('üèóÔ∏è All tables recreated')

    // Create indexes
    await sql`CREATE INDEX idx_users_email ON users(email)`
    await sql`CREATE INDEX idx_users_school_id ON users(school_id)`
    await sql`CREATE INDEX idx_users_class_id ON users(class_id)`
    await sql`CREATE INDEX idx_users_role ON users(role)`
    await sql`CREATE INDEX idx_user_actions_user_id ON user_actions(user_id)`
    await sql`CREATE INDEX idx_user_actions_status ON user_actions(status)`
    await sql`CREATE INDEX idx_user_challenges_user_id ON user_challenges(user_id)`
    await sql`CREATE INDEX idx_classes_school_id ON classes(school_id)`
    await sql`CREATE INDEX idx_teacher_invites_code ON teacher_invites(invite_code)`
    await sql`CREATE INDEX idx_teacher_invites_status ON teacher_invites(status)`
    await sql`CREATE INDEX idx_teacher_invites_school_id ON teacher_invites(school_id)`
    await sql`CREATE INDEX idx_challenges_school_id ON challenges(school_id)`
    await sql`CREATE INDEX idx_user_badges_user_id ON user_badges(user_id)`

    console.log('üìä Indexes created')

    // Insert default eco actions
    await sql`
      INSERT INTO eco_actions (name, description, points, category, icon, unit) VALUES
      ('–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –±—É–º–∞–≥–∏', '–°–¥–∞–ª –±—É–º–∞–≥—É –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É', 10, 'recycling', 'Recycle', '–∫–≥'),
      ('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Ö–æ–¥–æ–≤', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –æ—Ç—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', 5, 'waste', 'Trash2', '—Ä–∞–∑'),
      ('–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –±—É—Ç—ã–ª–∫–∏', '–ü—Ä–∏–Ω–µ—Å –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –±—É—Ç—ã–ª–∫–∏ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É', 8, 'recycling', 'Droplets', '—à—Ç'),
      ('–ü–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤', '–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø–æ—Å–∞–¥–∫–µ –¥–µ—Ä–µ–≤—å–µ–≤', 25, 'nature', 'TreePine', '—à—Ç'),
      ('–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ', '–í–Ω–µ–¥—Ä–∏–ª –º–µ—Ä—ã –ø–æ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—é', 15, 'energy', 'Lightbulb', '—Ä–∞–∑'),
      ('–≠–∫–æ-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 12, 'transport', 'Car', '—Ä–∞–∑'),
      ('–£–±–æ—Ä–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏', '–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —É–±–æ—Ä–∫–µ —à–∫–æ–ª—å–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏', 20, 'cleanup', 'Trash2', '—Ä–∞–∑'),
      ('–≠–∫–æ–Ω–æ–º–∏—è –≤–æ–¥—ã', '–í–Ω–µ–¥—Ä–∏–ª –º–µ—Ä—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ –≤–æ–¥—ã', 10, 'water', 'Droplets', '—Ä–∞–∑')
    `

    // Insert default badges
    await sql`
      INSERT INTO badges (name, description, icon, points_required) VALUES
      ('First Steps', '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ —ç–∫–æ–ª–æ–≥–∏–∏', 'Award', 0),
      ('Recycling Champion', '–ß–µ–º–ø–∏–æ–Ω –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏', 'Recycle', 50),
      ('Tree Planter', '–ó–∞—â–∏—Ç–Ω–∏–∫ –¥–µ—Ä–µ–≤—å–µ–≤', 'TreePine', 100),
      ('Energy Saver', '–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å', 'Lightbulb', 150),
      ('Eco Warrior', '–≠–∫–æ-–≤–æ–∏–Ω', 'Shield', 300),
      ('Green Master', '–ú–∞—Å—Ç–µ—Ä —ç–∫–æ–ª–æ–≥–∏–∏', 'Crown', 500)
    `

    console.log('üå± Default data inserted')
    console.log('‚úÖ Database reset completed successfully!')

    return NextResponse.json({ 
      success: true,
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!',
      tables_created: [
        'schools', 'users', 'classes', 'eco_actions', 'user_actions',
        'challenges', 'user_challenges', 'badges', 'user_badges', 'teacher_invites'
      ],
      default_data: {
        eco_actions: 8,
        badges: 6
      }
    })

  } catch (error) {
    console.error('‚ùå Database reset failed:', error)
    return NextResponse.json({ 
      error: 'Database reset failed',
      details: error.message 
    }, { status: 500 })
  }
}
